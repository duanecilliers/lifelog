# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JournalEntry {
  date: DateTime!
  id: ID!
  json: JSON!
  userId: Int!
}

input JournalEntryCreateInput {
  date: DateTime!
  json: JSON!
  userId: Int!
}

input JournalEntryUpdateInput {
  date: DateTimeFieldUpdateOperationsInput
  id: Int!
  json: JSON
  userId: IntFieldUpdateOperationsInput
}

type LoginResponse {
  access_token: String!
  user: User!
}

type Mutation {
  createJournalEntry(journalEntry: JournalEntryCreateInput!): JournalEntry!
  login(loginUserInput: UserCreateInput!): LoginResponse!
  signup(loginUserInput: UserCreateInput!): LoginResponse!
  updateJournalEntry(updateJournalEntry: JournalEntryUpdateInput!): JournalEntry!
  updateProfile(profile: UpdateProfileInput!): Profile!
}

type Profile {
  bio: String!
  birthDate: String!
  id: Int!
  name: String!
  user: User!
  userId: Int!
}

input ProfileCreateNestedOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutUserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutUserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  bio: String
  birthDate: DateTime!
  name: String
}

input ProfileWhereUniqueInput {
  id: Int
  userId: Int
}

type Query {
  journalEntries: [JournalEntry!]!
  journalEntryByDay(date: DateTime!): JournalEntry!
  profile(userId: Float!): Profile!
  profiles: [Profile!]!
  user(email: String!): User!
  users: [User!]!
}

input UpdateProfileInput {
  bio: String!
  birthDate: String!
  name: String!
  userId: Int!
}

type User {
  email: String!
  id: Int!
  profile: Profile!
}

input UserCreateInput {
  email: String!
  password: String!
  profile: ProfileCreateNestedOneWithoutUserInput
}